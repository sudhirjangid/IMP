1,2 Comments and Poor variables
2,3
1 	input validation
1
4	left outer join
2 
1 	Index
3 
1,2 Constructors
1   <datalist></datalist> we use datalist for Autocomplete filling
1	Class Selector along with Type Selector
1	prompt()
3	getElementById().innerHTML ""
1	(true)XML doesnot need DTD but should conform
2	Acceptable values of category

Set-2

1
4 	false Ans:driving force
2,3	Incorrect about Defensive Programming
1
1 	Right outer join
3
4	DataStructure "View"
2
3,4 OOPs statements
1
1
4 	getElementsByName()
1	.disabled="true"
3	Attributes
3

Set-3

1	External stylesheet
1	cookies used to store user preferences??Ans:True
1	TC TDD TBA
1	HTML vs XML
1	
4 	Naming Conventions
1,3	Blackbox testing
1,2 Purpose of Defensive Programming ensures program never returns inaccurate result
4	Count(*)
2	Equi Join
4	Update Or Increase Salary by 10%
2,4	VIEW(true statements) 
4	sal=ANY(2000,4000,5000);
3 	Classes communication is called "Messaging"

Set-4
2,3,4 best practices for writing a program
2	20% modules 80% defects
2 	Exception Handling
3	image as hyperlink
4	CSS selector for opacity :hsla(120,25%,75%,0.3)
4	reasons for javascript in web pages
4	<NOSCRIPT></NOSCRIPT>
4	data formats where XML is extensivly used
4	Attributes cannot have Multiple values in XML
3	Customernames starting with about
3	MINUS
2	Modify salary based on experience
1,3,4 Characteristics of views
2	predicate IN avoids use of multiple OR in subqueries
1 	Abstraction focuses only on essentials

RVFD and Software Engineering

Set-1

1 	Developer doesnt have the skill to fix "ISSUE"
1 	QC introducing testing QA is actual testing
1 	poor requirement management causes software failures
2 	constraints requirement
1 	mutable requirement
4 	security requirement
2 	consequential requirement
4
2	wrong versions
2	Integration testing test for integration of two modules

Set-2
2	software req must be 
3	Features service satisfies needs of user
4	implict requirement
1 	Application background are pre-requisites
2	gold plating
3 	Quality management system
4 	PDCA cycle
3	Incremental model characteristics
1	config manager-moves files across projects
1	functional testing

Set-3
4	 	Security prevents malicious and accidental actions
2	 	CMMI is process improvement model
4	 	trunk-main line development,branch-side line development
2,3,4 	environment review installation
1		Defect Report
5 		Eliciting,analyzing,specifying,validating requirement
3		Not verifiable and not testable
1		requirement itemization
1		Explicit requirement
1 		requirement traceability

Set-4

3	scalability
3	QC intoduction , QA actual testing
1,3 Sales and initial planning(effort estimates, cost estimates)
4	Test Manager
2	Data migration testing (Existing relationships, Business Rules)
5 	requirement management process
1	exact response time of app should be Specified in SRS
3 	exception handling
4	stock exchange End of Day (explicit req)
4	requirement baseline

Set-5

2	Lack of "Requirement Engineering" leads to development of sw fails to provide customer satisfaction
2,3 Stakeholder needs, specific regulatory requirement (Solution Domain)
3	Loan, Background Check comes under  "User" requirement
4 	physical constraints(ATM in village delay in transactions due to flood )
1,3	Query Resolution Index(QRI)[Decrease time for closing query, increase query resolution]
4	checklist identifies series of items those need to be completed or verified
1	capgemini uses subversion, sharepoint for "configuration" management
1	Waterfall model is used when requirements,development environment are well known and is more or less is permanent

ACDB	Baseline			-	configurable item that has viewed and agreed upon development for future development
		version number		-	unique number or set of numbers assigned to a specific release	
		Library structure	-	controlled collection of software and documents
		configurable items	-	items need to be accessed controlled and treated as a unit
	
BADC	Sales and initial planning	-	Identifying activities 
		Create Test strategy 		-	setting standards for testing processes
		Analyze and design Testware	-	testers will develop
		TestExecution				-	test engineers will execute test processes
	
Set-6

1	STLC process
3	Sales and Initial Planning contains brain storming sessions where requirements are evaluated whether testable or not 

CDAB	sales and initial planning	-	Identifying activities
		create test strategy		-	setting standards for testing processes
		analyze and design			-	testers will develop
		test execution and analysis	-	test engineers will execute test processes

1 	software requirements enginnering consists of req development and re management
1 	attainable
2 	non testable items while testing for functional requirements(perfomance,Some implict)
2 	file handling requirement
1 	volatile requirements are likely to change during development process
1,2,4 Product management system(add new product, generate list,search product)
1,4,5,6 usecase level test cases






















